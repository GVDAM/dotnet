// <auto-generated />
using System;
using Gabriel.RentCar.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gabriel.RentCar.Data.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20200121121804_Initial_2")]
    partial class Initial_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Gabriel.RentCar.Business.Model.Carro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Ano")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Ativo");

                    b.Property<string>("Marca")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Modelo")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Preco");

                    b.Property<int>("TipoCarro");

                    b.HasKey("Id");

                    b.ToTable("Carros");
                });

            modelBuilder.Entity("Gabriel.RentCar.Business.Model.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Documento")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Gabriel.RentCar.Business.Model.Score", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Pontos");

                    b.Property<Guid>("VendedorId");

                    b.HasKey("Id");

                    b.HasIndex("VendedorId")
                        .IsUnique();

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("Gabriel.RentCar.Business.Model.Venda", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CarroId");

                    b.Property<Guid>("ClienteId");

                    b.Property<DateTime>("DataVenda");

                    b.Property<int>("Parcelas");

                    b.Property<Guid>("VendedorId");

                    b.HasKey("Id");

                    b.HasIndex("CarroId");

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.HasIndex("VendedorId");

                    b.ToTable("Vendas");
                });

            modelBuilder.Entity("Gabriel.RentCar.Business.Model.Vendedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("VendasRealizadas");

                    b.HasKey("Id");

                    b.ToTable("Vendedores");
                });

            modelBuilder.Entity("Gabriel.RentCar.Business.Model.Score", b =>
                {
                    b.HasOne("Gabriel.RentCar.Business.Model.Vendedor")
                        .WithOne("Score")
                        .HasForeignKey("Gabriel.RentCar.Business.Model.Score", "VendedorId");
                });

            modelBuilder.Entity("Gabriel.RentCar.Business.Model.Venda", b =>
                {
                    b.HasOne("Gabriel.RentCar.Business.Model.Carro", "Carro")
                        .WithMany()
                        .HasForeignKey("CarroId");

                    b.HasOne("Gabriel.RentCar.Business.Model.Cliente", "Cliente")
                        .WithOne("Venda")
                        .HasForeignKey("Gabriel.RentCar.Business.Model.Venda", "ClienteId");

                    b.HasOne("Gabriel.RentCar.Business.Model.Vendedor", "Vendedor")
                        .WithMany("Vendas")
                        .HasForeignKey("VendedorId");
                });
#pragma warning restore 612, 618
        }
    }
}
